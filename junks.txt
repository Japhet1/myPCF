import * as React from "react"
import { Formik, FormikHelpers, FormikProps, Form, Field, FieldProps } from 'formik';
import { IStackTokens, Stack, StackItem } from "@fluentui/react/lib/Stack";
import { mergeStyleSets, values } from "@fluentui/react";
import { Dropdown, IDropdownStyles, IDropdownOption } from "@fluentui/react/lib/Dropdown";
import { TextField, ITextFieldStyles } from "@fluentui/react/lib/TextField";
import { DatePicker, DayOfWeek, defaultDatePickerStrings } from "@fluentui/react";
import { LifeEventCategoryData, LifeEventCategoryProp } from "./DummyData/categoryData";
import { FieldDropdown, FieldText, FieldDatePicker, FormikValidityObserver } from "pcf-components/lib/formikInputs";
import * as Yup from "yup"
import { postData } from "./Api/api";
  
const stackgap = { childrenGap: 20 }
const stackGap: IStackTokens = { childrenGap: 20 }

const classNames = mergeStyleSets({
    container: {
        width: '100%'
    }
})

const textFieldStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 418 } };
const dropdownStyles: Partial<IDropdownStyles> = { dropdown: { width: 200 } };

const days: IDropdownOption[] = [
    { text: 'Sunday', key: DayOfWeek.Sunday },
    { text: 'Monday', key: DayOfWeek.Monday },
    { text: 'Tuesday', key: DayOfWeek.Tuesday },
    { text: 'Wednesday', key: DayOfWeek.Wednesday },
    { text: 'Thursday', key: DayOfWeek.Thursday },
    { text: 'Friday', key: DayOfWeek.Friday },
    { text: 'Saturday', key: DayOfWeek.Saturday },
]

interface MyFormValues {
    category: {key: string, text: string, type: {}[]},
    type: {key: string, text: string},
    detail: string,
    date: string
}
interface CreateFormProp {
    categoryOption: LifeEventCategoryProp[]
    setValid: (valid: boolean) => void
    showCategory: boolean
}
const setForm = {
    category: {key: '', text: '', type: [{}]},
    type: {key: '', text: ''},
    detail: "",
    date: ""
}
export const CreateForm: React.FC<CreateFormProp> = (props) => {
    const [firstDayOfWeek, setFirstDayOfWeek] = React.useState(DayOfWeek.Sunday);
    const [firstTextFieldValue, setFirstTextFieldValue] = React.useState('');
    const [secondTextFieldValue, setSecondTextFieldValue] = React.useState('');
    const optionCategory = React.useRef<LifeEventCategoryProp[]>(props.categoryOption)
    const [selectedItem, setSelectedItem] = React.useState<MyFormValues>(setForm);
    React.useEffect(() => {
        const transformData = (data: MyFormValues) => {
            const newData = {
                category: data.category.text,
                date: new Date(`${data.date}`).toLocaleString(),
                detail: data.detail,
                type: data?.type.text
            };
            return postData(newData)
        };

        transformData(selectedItem)
    }, [selectedItem])   
    const getOptions = (values: any): IDropdownOption<any>[] => {    
        if (values.category) {
            const v = values.category.key;
            const selectedCategory = optionCategory.current.find((e) => e.key.toString().startsWith(v));
            if (selectedCategory && selectedCategory.type) {
                return selectedCategory.type;
            }
        }
        return [];
    }
    return (
        <div>
            <Formik
                initialValues={setForm} //event.writableFields
                validationSchema={Yup.object().shape({
                    category: Yup.object({
                        text: Yup.string().required('Required')
                    }).required('Required').nullable(),
                    type: Yup.object({
                        text: Yup.string().required('Required')
                    }).required('Required').nullable(),
                    detail: Yup.string(),
                    date: Yup.string().required('Required'),
                })} //event.validate
                enableReinitialize={true}
                onSubmit={(values, actions) => {
                    setSelectedItem(values)
                    actions.setSubmitting(false);
                }}
            
                component={({values, touched, errors, ...formprops}) => (
                    <Form>
                        <Stack tokens={stackGap}>
                            <Stack horizontal tokens={stackgap}>
                                <StackItem>
                                    <FieldDropdown
                                        name="category"
                                        placeholder=""
                                        label="Select category"
                                        options={optionCategory.current as IDropdownOption<any>[]}
                                        styles={dropdownStyles}  
                                    />
                                </StackItem>
                                <StackItem>
                                    <FieldDropdown
                                        name="type"
                                        placeholder=""
                                        label="Select event type"
                                        options={getOptions(values)}
                                        disabled={!(values as any).category}
                                        styles={dropdownStyles}
                                    />
                                </StackItem>
                            </Stack>
                            <StackItem>
                                <FieldText
                                    name="detail"
                                    label="Details"
                                    styles={textFieldStyles}
                                />
                            </StackItem>
                            <StackItem>
                                <FieldDatePicker
                                    name="date"
                                    label="Date"
                                    firstDayOfWeek={firstDayOfWeek}
                                    showWeekNumbers={true}
                                    firstWeekOfYear={1}
                                    showMonthPickerAsOverlay={true}
                                    placeholder="Select a date..."
                                    ariaLabel="Select a date"
                                    // DatePicker uses English strings by default. For localized apps, you must override this prop.
                                    strings={defaultDatePickerStrings}
                                />
                            </StackItem>
                        </Stack>
                        <FormikValidityObserver callback={props.setValid} />
                        <button type="submit">Submit</button>
                    </Form>
                )}
            />
        </div>
    );
}