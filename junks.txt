// npx create-react-app my-app --template typescript
// cd my-app

// Step 2: Create Context and Reducer
// Create a context and a reducer to manage the state.

// src/context/AppContext.tsx

import React, { createContext, useReducer, ReactNode } from 'react';

interface State {
  data: any[];
}

interface Action {
  type: string;
  payload?: any;
}

const initialState: State = {
  data: [],
};

const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case 'SET_DATA':
      return { ...state, data: action.payload };
    case 'ADD_DATA':
      return { ...state, data: [...state.data, action.payload] };
    case 'EDIT_DATA':
      return {
        ...state,
        data: state.data.map(item => item.id === action.payload.id ? action.payload : item),
      };
    case 'DELETE_DATA':
      return {
        ...state,
        data: state.data.filter(item => item.id !== action.payload),
      };
    default:
      return state;
  }
};

const AppContext = createContext<{ state: State; dispatch: React.Dispatch<Action> }>({
  state: initialState,
  dispatch: () => null,
});

const AppProvider = ({ children }: { children: ReactNode }) => {
  const [state, dispatch] = useReducer(reducer, initialState);

  return (
    <AppContext.Provider value={{ state, dispatch }}>
      {children}
    </AppContext.Provider>
  );
};

export { AppContext, AppProvider };

Step 3: Create API Call Functions
Create functions to handle API calls.

src/api/api.ts

const API_URL = 'https://api.example.com/data';

export const fetchData = async () => {
  const response = await fetch(API_URL);
  return response.json();
};

export const addData = async (data: any) => {
  const response = await fetch(API_URL, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(data),
  });
  return response.json();
};

export const editData = async (id: number, data: any) => {
  const response = await fetch(`${API_URL}/${id}`, {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(data),
  });
  return response.json();
};

export const deleteData = async (id: number) => {
  const response = await fetch(`${API_URL}/${id}`, {
    method: 'DELETE',
  });
  return response.json();
};

Step 4: Create Components to Dispatch API Calls
Create components to dispatch the API functions.

src/components/DataFetcher.tsx

import React, { useContext, useEffect } from 'react';
import { AppContext } from '../context/AppContext';
import { fetchData } from '../api/api';

const DataFetcher = () => {
  const { dispatch } = useContext(AppContext);

  useEffect(() => {
    const getData = async () => {
      const data = await fetchData();
      dispatch({ type: 'SET_DATA', payload: data });
    };

    getData();
  }, [dispatch]);

  return null;
};

export default DataFetcher;

src/components/DataManager.tsx

import React, { useContext } from 'react';
import { AppContext } from '../context/AppContext';
import { addData, editData, deleteData } from '../api/api';

const DataManager = () => {
  const { dispatch } = useContext(AppContext);

  const handleAdd = async (newData: any) => {
    const data = await addData(newData);
    dispatch({ type: 'ADD_DATA', payload: data });
  };

  const handleEdit = async (id: number, updatedData: any) => {
    const data = await editData(id, updatedData);
    dispatch({ type: 'EDIT_DATA', payload: data });
  };

  const handleDelete = async (id: number) => {
    await deleteData(id);
    dispatch({ type: 'DELETE_DATA', payload: id });
  };

  return (
    <div>
      <button onClick={() => handleAdd({ id: 1, name: 'New Item' })}>Add</button>
      <button onClick={() => handleEdit(1, { id: 1, name: 'Updated Item' })}>Edit</button>
      <button onClick={() => handleDelete(1)}>Delete</button>
    </div>
  );
};

export default DataManager;

Step 5: Use Components in App
Finally, use these components in your main App component.

src/App.tsx

import React from 'react';
import { AppProvider } from './context/AppContext';
import DataFetcher from './components/DataFetcher';
import DataManager from './components/DataManager';

const App = () => {
  return (
    <AppProvider>
      <div className="App">
        <h1>React TypeScript App</h1>
        <DataFetcher />
        <DataManager />
      </div>
    </AppProvider>
  );
};

export default App;